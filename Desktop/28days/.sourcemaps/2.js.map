{"version":3,"sources":["../../src/pages/passwordreset/passwordreset.module.ts","../../src/validators/email.ts","../../src/pages/passwordreset/passwordreset.ts"],"names":[],"mappings":"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","file":"2.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { IonicPageModule } from 'ionic-angular';\nimport { PasswordresetPage } from './passwordreset';\n\n@NgModule({\n  declarations: [\n    PasswordresetPage,\n  ],\n  imports: [\n    IonicPageModule.forChild(PasswordresetPage),\n  ],\n})\nexport class PasswordresetPageModule {}\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/passwordreset/passwordreset.module.ts","import { FormControl } from '@angular/forms';\n\nexport class EmailValidator {\n\n  static isValid(control: FormControl){\n    const re = /^([a-zA-Z0-9_\\-\\.]+)@([a-zA-Z0-9_\\-\\.]+)\\.([a-zA-Z]{2,5})$/.test(control.value);\n\n    if (re){\n      return null;\n    }\n\n    return {\n      \"invalidEmail\": true\n    };\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/validators/email.ts","import { Component } from '@angular/core';\nimport { IonicPage, NavController, AlertController } from 'ionic-angular';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { AuthProvider } from '../../providers/auth/auth';\nimport { EmailValidator } from '../../validators/email';\n\n/**\n * Generated class for the PasswordresetPage page.\n *\n * See https://ionicframework.com/docs/components/#navigation for more info on\n * Ionic pages and navigation.\n */\n\n@IonicPage()\n@Component({\n  selector: 'page-passwordreset',\n  templateUrl: 'passwordreset.html',\n})\nexport class PasswordresetPage {\n\tresetPasswordForm: FormGroup;\n  constructor(public navCtrl: NavController, public auth: AuthProvider, public formBuilder: FormBuilder,\n    public alertCtrl: AlertController) {\n\t  this.resetPasswordForm = formBuilder.group({\n\t    email: ['', Validators.compose([Validators.required, EmailValidator.isValid])],\n\t  })\n\t}\n\n  resetpassword(){\n    if (!this.resetPasswordForm.valid){\n      console.log(this.resetPasswordForm.value.email);\n      let alert = this.alertCtrl.create({\n        title: '이메일 주소',\n        message: '이메일 주소의 형식이<br>올바르지 않습니다. 다시 확인해주세요!',\n        buttons: [\n          {\n            text: '확인',\n            role: 'cancel'\n          }\n        ]\n      });\n      alert.present();\n    } else {\n      this.auth.resetPassword(this.resetPasswordForm.value.email).then((user) => {\n        let alert = this.alertCtrl.create({\n          title: '비밀번호 재설정 링크 발송 완료!',\n          message: \"기입하신 이메일로 비밀번호 재설정 링크를<br>보냈어요. 이메일을 확인해주세요.\",\n          buttons: [\n            {\n              text: '확인',\n              role: 'cancel',\n              handler: () => {\n                this.navCtrl.pop();\n              }\n            }\n          ]\n        });\n        alert.present();\n      }, (error) => {\n        console.log(JSON.stringify(error));\n        var message;\n        if (error.code == 'auth/user-not-found') {\n          message = '등록되지 않은 이메일 주소입니다.<br>다시 확인해주세요!';\n        } else {\n          message = error.message;\n        }\n        let errorAlert = this.alertCtrl.create({\n          title: '이메일 주소',\n          message: message,\n          buttons: [\n            {\n              text: '확인',\n              role: 'cancel'\n            }\n          ]\n        });\n        errorAlert.present();\n      });\n    }\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/passwordreset/passwordreset.ts"],"sourceRoot":""}